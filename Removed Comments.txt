From MyDlg1.cpp
OnBnClickedButton3()
	//DigitalMicrograph::Image img1/*, img2*/;
	//img1 = DigitalMicrograph::RealImage("img1", 4, 500, 500);
	////img2 = DigitalMicrograph::RealImage("img2", 4, 50, 50);
	//int i, j;
	//Gatan::PlugIn::ImageDataLocker img1lock(img1);
	//float* img1pix = (float*)img1lock.get();
	////Gatan::PlugIn::ImageDataLocker img2lock(img2);
	////float* img2pix = (float*)img2lock.get();
	//
	//for (i = 0; i<500; i++)
	//{
	//	for (j = 0; j<500; j++)
	//	{
	//		img1pix[500 * j + i] = i+j;
	//	}
	//}
	//img1.GetOrCreateImageDocument().ShowAtPosition(15, 30);
	//DigitalMicrograph::UpdateImage(img1);
	//DigitalMicrograph::Sleep(4);

	//ExtraGatan::CircularMask2D(&img1, 200, 420, 50);

	//DigitalMicrograph::UpdateImage(img1);
	//DigitalMicrograph::Result("pressed draw\n");

//Start();

	//DigitalMicrograph::Image img1, img2, imgcc;
	//img1 = DigitalMicrograph::RealImage("img1", 4, 50, 50);
	//img2 = DigitalMicrograph::RealImage("img2", 4, 50, 50);
	//imgcc = DigitalMicrograph::RealImage("imgcc", 4, 50, 50);
	//int i, j;
	//Gatan::PlugIn::ImageDataLocker img1lock(img1);
	//float* img1pix = (float*)img1lock.get();
	//Gatan::PlugIn::ImageDataLocker img2lock(img2);
	//float* img2pix = (float*)img2lock.get();
	//Gatan::PlugIn::ImageDataLocker imgcclock(imgcc);
	//float* imgccpix = (float*)imgcclock.get();
	//
	//for (i = 0; i<50; i++)
	//{
	//	for (j = 0; j<50; j++)
	//	{
	//		img1pix[50 * j + i] = i;
	//	}
	//}

	//for (i = 0; i<50; i++)
	//{
	//	for (j = 0; j<50; j++)
	//	{
	//		img2pix[50 * j + i] = i + j;
	//	}
	//}

	////ExtraGatan::CrossCorr(imgcc, img1, img2);
	//imgcc = DigitalMicrograph::CrossCorrelate(img1, img2);
	//imgcc.GetOrCreateImageDocument().ShowAtPosition(15, 30);

//	{
//		roidia->Create(IDD_DIALOG4, NULL);
//		roidia->CenterWindow();
//		roidia->ShowWindow(SW_SHOW);
//		roidia->UpdateWindow();
//		//CDialog::Create(IDD_DIALOG4, ((CWnd*)this));
//	}






OnBnClickedButton6()
//try
	//{
	//	
	//	DigitalMicrograph::TagGroupGetTagAsLong(Persistent, "Info:ShiftX0", &TagShiftX0);
	//	DigitalMicrograph::TagGroupGetTagAsLong(Persistent, "Info:ShiftY0", &TagShiftY0);
	//	DigitalMicrograph::TagGroupGetTagAsLong(Persistent, "Info:TiltX0", &TagTiltX0);
	//	DigitalMicrograph::TagGroupGetTagAsLong(Persistent, "Info:TiltY0", &TagTiltY0);
	//}
	//catch (...)
	//{
	//	DigitalMicrograph::Result("Failed to Get tag data\n");
	//}









DED_TiltCalibration.cpp
ln 268 //DigitalMicrograph::Result("AcquireImage2 time = " + boost::lexical_cast<std::string>(finish)+" ticks\n");
//img1.DataChanged();

ln278 		//img0.GetOrCreateImageDocument().ShowAtPosition(15,30);
		//DigitalMicrograph::SetWindowSize(img0,200,200);
		//imgCC.GetOrCreateImageDocument().ShowAtPosition(445,30);
		//DigitalMicrograph::SetWindowSize(imgCC, 200, 200);

ln 388//TiltCal = DigitalMicrograph::NewImage("Sift calibration", data_type, (2*nTilts)+1, (2*nTilts)+1, 2);
ln 457 	//dx = x - X0; //dy = y - Y0; 
ln 459 //			sX= ShiftX0 - (dx*xShpX + dy*yShpX);	sY= ShiftY0 - (dx*xShpY + dy*yShpY);





Collect.cpp
ln 269			if (pt == 0)
			{
				DigitalMicrograph::Result("Before acquire\n");
			}


ln 273			//for(ii=0;ii<imgX*imgY;ii++)
			//{
			//	CBEDPix[pt*imgX*imgY + ii] = img1Pix[ii];//copying current image into CBED stack
			//}


ln 320 			//	Dark.operator=(DigitalMicrograph::NewImageFromFile(refpath));

ln 350 //	for (pt = 0; pt < nPts; pt++) 










Process.cpp

ln 239		//if (i == 0 || i == 1)
		//{
		//	DigitalMicrograph::Result("dtheta = " + boost::lexical_cast<std::string>(dTheta)+" col2magthetapix = " + boost::lexical_cast<std::string>(col2currentmagthetapix)+"\n");
		//}

ln 243 		//MagSum += DigitalMicrograph::GetPixel(*MagTheta, 0, i);

ln 264//void Process::GetMeanG(DigitalMicrograph::Image MagTheta, DigitalMicrograph::Image &Cluster, float* Clusterpix, double &MeanMag, double &MeanTheta, double &MeanVx, double &MeanVy, int &nMeas)
//{
//
//	//incoming Mean values are a single vector
//	//outgoing mean values are an average of the vectors deemed to be in the cluster
//	//incoming mag/theta is the same for +/- vectors [since tan(q+pi)=tan(q)]
//	//so flip the vectors if the x-component has an opposite sign
//
//	double tolMag = 5;//tolerance in pixels to say it's in a cluster
//	double tolAng = 5;//tolerance in degrees to say it's in a cluster
//	long n, nVecs;
//	int i;
//	double dTheta, dMag, ThetaSum, VxSum, VySum, x, y, signX;
//
//	DigitalMicrograph::Image Magthetaclone;
//	Magthetaclone = DigitalMicrograph::ImageClone(MagTheta);
//	//Gatan::PlugIn::ImageDataLocker magthetaclonelock(Magthetaclone);
//	//float* magthetapix = (float*)magthetaclonelock.get();
//
//	DigitalMicrograph::Get2DSize(Cluster, &n, &nVecs);
//	//DigitalMicrograph::Result("n = " + boost::lexical_cast<std::string>(n)+", nVecs = " + boost::lexical_cast<std::string>(nVecs)+"\n");
//	nMeas = 0;
//	double MagSum = 0;
//
//	double currmagthetapix;
//	double col2currentmagthetapix;
//
//	for (i = 0; i < nVecs; i++)
//	{
//		currmagthetapix = DigitalMicrograph::GetPixel(Magthetaclone, 0, i);
//		//		dMag = abs(MeanMag - DigitalMicrograph::GetPixel(MagTheta, 0, i));
//		dMag = abs(MeanMag - currmagthetapix);
//		if (i == 0 || i == 1)
//		{
//			DigitalMicrograph::Result("dmag = " + boost::lexical_cast<std::string>(dMag)+"\n");
//			DigitalMicrograph::Result("magthetapix = " + boost::lexical_cast<std::string>(currmagthetapix)+"\n");
//			//DigitalMicrograph::UpdateImage(*MagTheta);
//		}
//
//		col2currentmagthetapix = DigitalMicrograph::GetPixel(Magthetaclone, 1, i);
//		//	dTheta = abs(MeanTheta - DigitalMicrograph::GetPixel(*MagTheta, 1, i));
//
//		dTheta = abs(MeanTheta - col2currentmagthetapix);
//
//
//		if (i == 0 || i == 1)
//		{
//			DigitalMicrograph::Result("dtheta = " + boost::lexical_cast<std::string>(dTheta)+" col2magthetapix = " + boost::lexical_cast<std::string>(col2currentmagthetapix)+"\n");
//		}
//
//		if ((dTheta < tolAng) && (dMag < tolMag))
//		{
//			nMeas++;
//			//MagSum += DigitalMicrograph::GetPixel(*MagTheta, 0, i);
//			MagSum += currmagthetapix;
//
//			//ThetaSum += DigitalMicrograph::GetPixel(*MagTheta, 1, i);
//			ThetaSum += col2currentmagthetapix;
//
//
//			x = DigitalMicrograph::GetPixel(Magthetaclone, 2, i);
//			y = DigitalMicrograph::GetPixel(Magthetaclone, 3, i);
//			signX = abs(x) / x;
//
//			VxSum += x*(abs(MeanVx) / MeanVx)*signX;//second part here reverses
//			VySum += y*(abs(MeanVx) / MeanVx)*signX;//sign if x is opposite sign
//
//
//			Clusterpix[i] = 1;
//
//
//			//int ii,jj;
//			//for (ii = i; ii <= i + 1; ii++)
//			//{
//			//	for (jj = 0; jj <= 1; jj++)
//			//	{
//			//		Clusterpix[n*jj+ii] = 1;//it is in the cluster
//			//	}
//			//}
//
//			//Cluster[i, 0, i + 1, 1] = 1;//it is in the cluster
//
//			MeanMag = MagSum / (double)nMeas;
//			MeanTheta = ThetaSum / (double)nMeas;
//			MeanVx = VxSum / (double)nMeas;
//			MeanVy = VySum / (double)nMeas;
//
//		} //end of if(dtheta)
//
//	}//end of for(i)
//	//DigitalMicrograph::Result("If error here, it's in GetMeanG\n");
//	//End of GetMeanG
//}


ln 276 	//DigitalMicrograph::ImageDocumentShowAtPosition(DigitalMicrograph::ImageGetOrCreateImageDocument(AvCC), 15, 30);

	//// adding here so that ln 256 can be done

ln 310 	//DigitalMicrograph::Result("At for loop to make 1s\n");

ln 316 	//DigitalMicrograph::Result("Made temp disc image\n");

ln 339 			//for (k = 0; k < avccX*avccY; k++)
			//{
			//	avccpix[k] *= temppix[i];//this peak is done, delete it
			//}


ln 511	//if (!DigitalMicrograph::OkCancelDialog("continue?"))
	//{
	//	return;
	//}

ln 708 DigitalMicrograph::Result("imgX =" + boost::lexical_cast<std::string>(imgX)+"\n");

ln 736 	//float tInc = Rr*0.8; //Must match tInc in collect!

ln 764 	//DigitalMicrograph::Result("Made avg image\n");

ln 793 				//DigitalMicrograph::Result("disX: " + boost::lexical_cast<std::string>(disX)+"disY: " + boost::lexical_cast<std::string>(disY)+"\n");


ln 1084 //DigitalMicrograph::Result("About to find min values\n");
	//DigitalMicrograph::Result("Found values, about to tidy up\n");

ln 1118 //if (g1mag < g2mag)
	//{
	//}
	//else
	//{
	//}
	//F = 2.5*(2 * nTilts + 3) / 4;

	DigitalMicrograph::Result("maxg1 = " + boost::lexical_cast<std::string>(maxofg1)+" \n");
	DigitalMicrograph::Result("maxg2 = " + boost::lexical_cast<std::string>(maxofg2)+" \n");

ln 1126 /*- 2 * wid*/

ln 1132 //FimgX = 1.4*(2 * ExtraGatan::maxoftwo(nV1, nV2) + 1)*(2 * nTilts + 3)*Rr;
	
ln 1190 //DigitalMicrograph::Result("t2 = " + boost::lexical_cast<std::string>(t2)+", l2 = " + boost::lexical_cast<std::string>(l2));
	//DigitalMicrograph::Result("a1X = " + boost::lexical_cast<std::string>(a1X)+", a1Y = " + boost::lexical_cast<std::string>(a1Y)+"\n");


ln 1225 //DigitalMicrograph::Result("LACBED image: " + boost::lexical_cast<std::string>(gNo)+"\n");

ln 1249 //DigitalMicrograph::Result("montmin = " + boost::lexical_cast<std::string>(montmin)+", montmax =" + boost::lexical_cast<std::string>(montmax)+"\n");

	//DigitalMicrograph::ImageDisplay montagedis;
	//montagedis = DigitalMicrograph::ImageGetImageDisplay(Montage, 0);
	//DigitalMicrograph::ImageDisplaySetMinimumContrast(montagedis, 0);
	//DigitalMicrograph::ImageDisplaySetContrastLimits(montagedis, 0, montmax);
	//DigitalMicrograph::Result("Min contrast: " + boost::lexical_cast<std::string>(DigitalMicrograph::ImageDisplayGetContrastMode(montagedis)) + "\n");
	//DigitalMicrograph::ImageDataChanged(Montage);

ln 1255 //for (i = 0; i<10; i++)
	//{
	//	datestring += date[i];
	//}












MyDlg2.cpp
void MyDlg2::OnBnClickedButton1()
{
	// TODO: Add your control notification handler code here

	//testing roi
	//if(DigitalMicrograph::GetFrontImage())
	//	{
	//		DigitalMicrograph::Image In = DigitalMicrograph::FindFrontImage();
	//		In.GetOrCreateImageDocument().Show();

	//		DEDProcess->AddBlueCircle(&In, 20,300,40,500); 

	//		DEDProcess->AddYellowArrow(&In, 60, 1000, 2000, 800);

	//		//DigitalMicrograph::Image Diff = ExtraGatan::DiffImage(&In,false);
	//		//Diff.GetOrCreateImageDocument().ShowAtPosition(415,200);
	//	}
	//	else
	//	{
	//		DigitalMicrograph::OkDialog("Could not find front image");
	//		return;
	//	}
	//return;
	//DEDProcess->AddBlueCircle();

	long nPeaks = 100;
	DigitalMicrograph::Image Test;
	Test = DigitalMicrograph::RealImage("Test", 4, 1, nPeaks);
	DigitalMicrograph::Result("After image created\n");
	if (DigitalMicrograph::OkCancelDialog("Continue?"))
	{
		Test.GetOrCreateImageDocument().ShowAtPosition(15, 30);

		DigitalMicrograph::ImageDocument Testdoc;
		Testdoc = DigitalMicrograph::ImageGetOrCreateImageDocument(Test);

		DigitalMicrograph::SetWindowSize(Test, 800, 800);
		DigitalMicrograph::SetName(Test, "Test image");
		//DigitalMicrograph::Sleep(1);

		Gatan::PlugIn::ImageDataLocker TestLock(Test);
		float* Testpix = (float*)TestLock.get();
		DigitalMicrograph::Result("Made locker and pointer to first pixel\n");

		double pixval;
		pixval = DigitalMicrograph::GetPixel(Test, 0, 40);
		int ii, jj;
		for (ii = 0; ii < nPeaks; ii++)
		{
			
				//DigitalMicrograph::SetPixel(Test, ii, jj, 0.2);
				Testpix[ii] = 0.5*(float)ii;
		
		}




		DigitalMicrograph::Image Xx, Xxtrans, Vx;

		Xx = DigitalMicrograph::RealImage("Xx", 4, nPeaks, nPeaks);
		Xxtrans = DigitalMicrograph::RealImage("XxTransposed", 4, nPeaks, nPeaks);
		Vx = DigitalMicrograph::RealImage("Vx", 4, nPeaks, nPeaks);


		Gatan::PlugIn::ImageDataLocker xlock(Test);
		float* xpix = (float*)xlock.get();

		Gatan::PlugIn::ImageDataLocker xxlock(Xx);
		float* xxpix = (float*)xxlock.get();

		Gatan::PlugIn::ImageDataLocker xxtranslock(Xxtrans);
		float* xxtranspix = (float*)xxtranslock.get();

		Gatan::PlugIn::ImageDataLocker vxlock(Vx);
		float* vxpix = (float*)vxlock.get();

		int iii, jjj;

		//create Xx matrix, copies a vertical single pixel width X image into all npeak collumns
		for (iii = 0; iii < nPeaks; iii++)
		{
			for (jjj = 0; jjj < nPeaks; jjj++)
			{
				xxpix[nPeaks*jjj + iii] = xpix[jjj];
			}
		}
		//create transpose of matrix Xx
		for (iii = 0; iii < nPeaks; iii++)
		{
			for (jjj = 0; jjj < nPeaks; jjj++)
			{
				xxtranspix[nPeaks*jjj + iii] = xxpix[nPeaks*iii + jjj];
			}
		}
		//Vx=xxtrans-xx
		for (iii = 0; iii < nPeaks; iii++)
		{
			for (jjj = 0; jjj < nPeaks; jjj++)
			{
				vxpix[nPeaks*jjj + iii] = xxtranspix[nPeaks*jjj + iii] - xxpix[nPeaks*jjj + iii];
			}
		}



		Xx.GetOrCreateImageDocument().ShowAtPosition(15, 30);
		Xxtrans.GetOrCreateImageDocument().ShowAtPosition(15, 30);
		Vx.GetOrCreateImageDocument().ShowAtPosition(15, 30);



		//DEDProcess->AddBlueCircle(&Test, 10, 20, 15, 25);
		//DEDProcess->AddYellowArrow(&Test, 5, 15, 10, 25);
		

		//DigitalMicrograph::Window Colourscriptwin;
		//Colourscriptwin = DigitalMicrograph::NewScriptWindowFromFile("C:\\ProgramData\\Gatan\\Plugins\\SetColour.s");
		//DigitalMicrograph::ScriptWindowExecute(Colourscriptwin);

		//
		//DigitalMicrograph::Result("[0,40] = "+boost::lexical_cast<std::string>(pixval)+"\n");
		return;
	}
	else
	{
	//	DigitalMicrograph::Window Colourscriptwin;
		//Colourscriptwin = DigitalMicrograph::NewScriptWindowFromFile("C:\\ProgramData\\Gatan\\Plugins\\SetColour.s");
		//DigitalMicrograph::ScriptWindowExecute(Colourscriptwin);

		return;
	}

}


//void MyDlg2::OnBnClickedCheck3()
//{
//	// TODO: Add your control notification handler code here
//}


ln 95 //ON_BN_CLICKED(IDC_CHECK3, &MyDlg2::OnBnClickedCheck3)

ln 150 

	//Gatan::uint32 binx;
	//int binningx;
	//binningx = 4;
	//binx = binningx;
	//DigitalMicrograph::Result("binning: " + boost::lexical_cast<std::string>(binningx)+"binning: " + boost::lexical_cast<std::string>(binx)+"\n");
	





ln 11 //
//double diffclock(clock_t clock1,clock_t clock2)
//{
//	double diffticks=clock1-clock2;
//	double diffms=(diffticks*1000)/CLOCKS_PER_SEC;
//	return diffms;
//} 
//#include "time.h"
	//DEDProcess = new Process;

ln 77 //	ON_BN_CLICKED(IDC_BUTTON1, &MyDlg2::OnBnClickedButton1)
















tiltcalibration.h 
	//Gatan::Camera::Camera camera;
	//Gatan::uint32 xpixels;
	//Gatan::uint ypixels;
	//bool inserted;
	//Gatan::Camera::AcquisitionProcessing processing;
	//Gatan::Camera::AcquisitionParameters acqparams;
	//Gatan::CM::AcquisitionPtr acq;
	//DigitalMicrograph::ScriptObject acqtok;
	//Gatan::CM::FrameSetInfoPtr fsi;
	//Gatan::Camera::AcquisitionImageSourcePtr acqsource;

	//bool acqprmchanged;
	//DigitalMicrograph::ScriptObject img_src;
	//bool quit, success;

//*img1 = ExtraGatan::Acquire(binning, &quit, &success, expo); 




tiltcalibration.cpp
ln 254 		//DigitalMicrograph::Result("about to call acquire image, acqsource->beginAcq()...\n");

Acquisition.h
//class Acquisition
//{
//public:
//	Acquisition();
//	virtual ~Acquisition();
//
//	static void CheckCamera(Gatan::Camera::Camera &camera, bool &inserted, Gatan::uint32 &xpixels, Gatan::uint32 &ypixels);
//	static DigitalMicrograph::ScriptObject GetFrameSetInfoPtr(DigitalMicrograph::ScriptObject&);
//	static void SetAcquireParameters(Gatan::Camera::AcquisitionProcessing &processing, Gatan::Camera::Camera &camera, double expo, int binning, Gatan::uint32 &xpixels, Gatan::uint32 &ypixels, Gatan::Camera::AcquisitionParameters &acqparams, Gatan::CM::AcquisitionPtr &acq, DigitalMicrograph::ScriptObject &acqtok, Gatan::CM::FrameSetInfoPtr &fsi, Gatan::Camera::AcquisitionImageSourcePtr &acqsource);
//	static void AcquireImage(DigitalMicrograph::Image &AcquiredInput, Gatan::Camera::AcquisitionImageSourcePtr &acqsource, Gatan::CM::AcquisitionPtr &acq, bool &acqprmchanged);
//	//static void AcquireImage()
//};



Acquisition.cpp
//void Acquisition::CheckCamera(Gatan::Camera::Camera &camera, bool &inserted, Gatan::uint32 &xpixels, Gatan::uint32 &ypixels)
//{
//	DigitalMicrograph::Result("In check camera\n");
//	//Gatan::Camera::Camera camera;
//	try
//	{
//		camera = Gatan::Camera::GetCurrentCamera();
//		Gatan::Camera::CCD_GetSize(camera, &xpixels, &ypixels);
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("failed in try get current camera\n");
//		short error;
//		long context;
//		DigitalMicrograph::GetException(&error, &context);
//		DigitalMicrograph::ErrorDialog(error);
//		DigitalMicrograph::OpenAndSetProgressWindow("No Camera Detected", "", "");
//		return;
//	}
//	inserted = false;
//	try
//	{
//		inserted = Gatan::Camera::GetCameraInserted(camera);
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("failed in try get inserted camera\n");
//		short error;
//		long context;
//		DigitalMicrograph::GetException(&error, &context);
//		DigitalMicrograph::ErrorDialog(error);
//		DigitalMicrograph::OpenAndSetProgressWindow("Couldn't check camera", "status", "");
//		return;
//	}
//
//	if (inserted != true)
//	{
//		DigitalMicrograph::OpenAndSetProgressWindow("Camera not inserted", "", "");
//		return;
//	}
//}
//
//DigitalMicrograph::ScriptObject Acquisition::GetFrameSetInfoPtr(DigitalMicrograph::ScriptObject &Acquis)
//
//{
//	DigitalMicrograph::Result("In get fsi\n");
//	static DigitalMicrograph::Function __sFunction = (DM_FunctionToken)NULL;
//
//	static const char *__sSignature = "ScriptObject GetFrameSetInfoPtr( ScriptObject * )";
//
//	Gatan::PlugIn::DM_Variant params[2];
//	
//	params[1].v_object_ref = (DM_ObjectToken*)Acquis.get_ptr();
//
//	GatanPlugIn::gDigitalMicrographInterface.CallFunction(__sFunction.get_ptr(), 2, params, __sSignature);
//	
//	return (DM_ScriptObjectToken_1Ref)params[0].v_object;
//
//};
//
//void Acquisition::SetAcquireParameters(Gatan::Camera::AcquisitionProcessing &processing, Gatan::Camera::Camera &camera, double expo, int binning, Gatan::uint32 &xpixels, Gatan::uint32 &ypixels, Gatan::Camera::AcquisitionParameters &acqparams, Gatan::CM::AcquisitionPtr &acq, DigitalMicrograph::ScriptObject &acqtok, Gatan::CM::FrameSetInfoPtr &fsi, Gatan::Camera::AcquisitionImageSourcePtr &acqsource)
//{
//	DigitalMicrograph::Result("about to set processing to unprocessed\n");
//	processing = Gatan::Camera::kUnprocessed;
//
//	bool temp_kunprocessed_selected = false;
//	bool temp_kdarksubtracted_selected = false;
//	bool temp_kgainnormalized_selected = false;
//	bool temp_kmaxprocessing_selected = false;
//	DigitalMicrograph::TagGroup Persistent;
//	Persistent = DigitalMicrograph::GetPersistentTagGroup();
//	std::string Tag_path;
//	Tag_path = "DigitalDiffraction:Settings:";
//	try
//	{
//		DigitalMicrograph::TagGroupGetTagAsBoolean(Persistent, (Tag_path + "kUnprocessed").c_str(), &temp_kunprocessed_selected);
//		DigitalMicrograph::TagGroupGetTagAsBoolean(Persistent, (Tag_path + "kDarkSubtracted").c_str(), &temp_kdarksubtracted_selected);
//		DigitalMicrograph::TagGroupGetTagAsBoolean(Persistent, (Tag_path + "kGainNormalized").c_str(), &temp_kgainnormalized_selected);
//		DigitalMicrograph::TagGroupGetTagAsBoolean(Persistent, (Tag_path + "kMaxProcessing").c_str(), &temp_kmaxprocessing_selected);
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("Failed to load settings information\n");
//	}
//	if (temp_kunprocessed_selected == true)
//	{
//		processing = Gatan::Camera::kUnprocessed;
//		DigitalMicrograph::Result("Mode : kUnprocessed\n");
//	}
//	if (temp_kdarksubtracted_selected == true)
//	{
//		processing = Gatan::Camera::kDarkSubtracted;
//		DigitalMicrograph::Result("Mode : kDarkSubtracted\n");
//	}
//	if (temp_kgainnormalized_selected == true)
//	{
//		processing = Gatan::Camera::kGainNormalized;
//		DigitalMicrograph::Result("Mode : kGainNormalized\n");
//	}
//	if (temp_kmaxprocessing_selected == true)
//	{
//		processing = Gatan::Camera::kMaxProcessing;
//		DigitalMicrograph::Result("Mode : kMaxProcessing\n");
//	}
//
//
//	DigitalMicrograph::Result("binning: " + boost::lexical_cast<std::string>(binning)+"\n");
//	DigitalMicrograph::Result("expo: " + boost::lexical_cast<std::string>(expo)+"\n");
//
//	Gatan::uint32 binx, biny;
//	binx = (Gatan::uint32)binning;
//	biny = (Gatan::uint32)binning;
//	DigitalMicrograph::Result("About to try\n");
//	try
//	{
//		//acqparams = Gatan::Camera::CreateAcquisitionParameters(camera, processing, expo, binx, biny, 0, 0, ypixels, xpixels);
//		acqparams = Gatan::Camera::CreateAcquisitionParameters_FullCCD(camera, processing, expo, binx, biny);
//		DigitalMicrograph::Result("binning: " + boost::lexical_cast<std::string>(binning)+"\n");
//		DigitalMicrograph::Result("binning: " + boost::lexical_cast<std::string>(binx)+"\n");
//
//		Gatan::CM::SetDoContinuousReadout(acqparams, true);
//		DigitalMicrograph::Result("2\n");
//		Gatan::CM::SetQualityLevel(acqparams, 0); // Can't remember if fast or slow :D
//		DigitalMicrograph::Result("3\n");
//		Gatan::Camera::Validate_AcquisitionParameters(camera, acqparams);
//		DigitalMicrograph::Result("validated parameters\n");
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("failed in try create acq params, readout, quality, validate\n");
//		short error;
//		long context;
//		DigitalMicrograph::GetException(&error, &context);
//		DigitalMicrograph::ErrorDialog(error);
//		DigitalMicrograph::OpenAndSetProgressWindow("Problem with acquisition", "parameters", "");
//		return;
//	}
//
//	acq = Gatan::CM::CreateAcquisition(camera, acqparams);
//	DigitalMicrograph::Result("5\n");
//	acqtok = DigitalMicrograph::ScriptObjectProxy<Gatan::Camera::AcquisitionImp, DigitalMicrograph::DMObject>::to_object_token(acq.get());
//	DigitalMicrograph::Result("6\n");
//	try
//	{
//		fsi = Acquisition::GetFrameSetInfoPtr(acqtok);
//		DigitalMicrograph::Result("7\n");
//
//
//		acqsource = Gatan::Camera::AcquisitionImageSource::New(acq, fsi, 0);
//		DigitalMicrograph::Result("8\n");
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("Failed to get fsi/acqsource\n");
//	}
//}
//
//void Acquisition::AcquireImage(DigitalMicrograph::Image &AcquiredInput, Gatan::Camera::AcquisitionImageSourcePtr &acqsource, Gatan::CM::AcquisitionPtr &acq, bool &acqprmchanged)
//{
//	DigitalMicrograph::Image AcquiredImage;
//	DigitalMicrograph::Result("Before acq->Begin\n");
//	try
//	{
//		DigitalMicrograph::Result("In try, about to acq->beginacq\n");
//		acqsource->BeginAcquisition();
//		DigitalMicrograph::Result("After beginacqu\n");
//		/*}
//		catch (...)
//		{
//		DigitalMicrograph::Result("failed in ->begin\n");
//		short error;
//		long context;
//		DigitalMicrograph::GetException(&error, &context);
//		DigitalMicrograph::ErrorDialog(error);
//		DigitalMicrograph::Result("Couldn't Create Image for Acquire\n");
//		return;
//		}*/
//		DigitalMicrograph::Result("After acq->begin\n");
//		acqprmchanged = false;
//	
//		/*try
//		{*/
//		DigitalMicrograph::Result("Before create image for acquisition\n	");
//		AcquiredImage = Gatan::Camera::CreateImageForAcquire(acq, "Acquired Image");
//		DigitalMicrograph::Result("After create image for acquisition\n	");
//
//		/*}
//		catch (...)
//		{
//		DigitalMicrograph::Result("failed in try create image for acquire\n");
//		short error;
//		long context;
//		DigitalMicrograph::GetException(&error, &context);
//		DigitalMicrograph::ErrorDialog(error);
//		DigitalMicrograph::Result("Couldn't Create Image for Acquire\n");
//		return;
//		}*/
//		DigitalMicrograph::Result("about to try and acquire...\n");
//		//try
//		//{
//		DigitalMicrograph::Result("Before acquireto\n");
//		
//		clock_t start = clock();
//		if (!acqsource->AcquireTo(AcquiredImage, true, 0.5, acqprmchanged))
//		{
//			// Now wait for it to finish again but dont restart if it finishes durign call....
//			while (!acqsource->AcquireTo(AcquiredImage, false,/* 1*/0.5, acqprmchanged))
//			{
//				// Waiting for read to finish
//			}
//		}
//		clock_t finish = clock() - start;
//		DigitalMicrograph::Result("Acquisition time inside function = " + boost::lexical_cast<std::string>(finish)+" ticks\n");
//		DigitalMicrograph::Result("Acquisition time inside function = " + boost::lexical_cast<std::string>(((float)finish) / CLOCKS_PER_SEC) + " seconds\n");
//
//		DigitalMicrograph::Result("After acquireto\n");
//		//}
//		//catch (...)
//		//{
//		//	DigitalMicrograph::Result("failed in try acquire to\n");
//		//	short error;
//		//	long context;
//		//	DigitalMicrograph::GetException(&error, &context);
//		//	DigitalMicrograph::ErrorDialog(error);
//		//	DigitalMicrograph::OpenAndSetProgressWindow("Couldn't Acquire Image", "", "");
//		//	return;
//		//}
//		DigitalMicrograph::Result("Before finish acq\n");
//		acqsource->FinishAcquisition();
//		DigitalMicrograph::Result("finished acquisition in acquire function\n");
//		AcquiredInput = AcquiredImage;
//		return;
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("Failed in acquisition\n");
//		return;
//	}
//}




ln 14 //DigitalMicrograph::Result("In check camera\n");

ln 109 	//DigitalMicrograph::Result("binning: " + boost::lexical_cast<std::string>(binning)+"\n");
	//DigitalMicrograph::Result("expo: " + boost::lexical_cast<std::string>(expo)+"\n");

ln 111 	//DigitalMicrograph::Result("About to try\n");


void Acquisition::AcquireImage(DigitalMicrograph::Image &AcquiredInput)


ln 154 		/*}
		catch (...)
		{
		DigitalMicrograph::Result("failed in ->begin\n");
		short error;
		long context;
		DigitalMicrograph::GetException(&error, &context);
		DigitalMicrograph::ErrorDialog(error);
		DigitalMicrograph::Result("Couldn't Create Image for Acquire\n");
		return;
		}*/
		/*try
		{*/
		/*}
		catch (...)
		{
		DigitalMicrograph::Result("failed in try create image for acquire\n");
		short error;
		long context;
		DigitalMicrograph::GetException(&error, &context);
		DigitalMicrograph::ErrorDialog(error);
		DigitalMicrograph::Result("Couldn't Create Image for Acquire\n");
		return;
		}*/
		DigitalMicrograph::Result("about to try and acquire...\n");
		//try
		//{
		DigitalMicrograph::Result("Before acquireto\n");
		DigitalMicrograph::Result("Before create image for acquisition\n	");
		DigitalMicrograph::Result("After create image for acquisition\n	");
		DigitalMicrograph::Result("After beginacqu\n");
		DigitalMicrograph::Result("After acq->begin\n");
		DigitalMicrograph::Result("In try, about to acq->beginacq\n");
		DigitalMicrograph::Result("Acquisition time inside function = " + boost::lexical_cast<std::string>(finish)+" ticks\n");
		DigitalMicrograph::Result("After acquireto\n");
		//}
		//catch (...)
		//{
		//	DigitalMicrograph::Result("failed in try acquire to\n");
		//	short error;
		//	long context;
		//	DigitalMicrograph::GetException(&error, &context);
		//	DigitalMicrograph::ErrorDialog(error);
		//	DigitalMicrograph::OpenAndSetProgressWindow("Couldn't Acquire Image", "", "");
		//	return;
		//}
		DigitalMicrograph::Result("Before finish acq\n");
		DigitalMicrograph::Result("finished acquisition in acquire function\n");
		//DigitalMicrograph::DeleteImage(AcquiredImage);





//void Acquisition::AcquireImage2(DigitalMicrograph::Image &AcquiredInput)//an acq_source->BeginAcquisition must be called once before this function is used, and ->FinishAcquisition must be called once after all acquisitions have been done.
//{
//	DigitalMicrograph::Image AcquiredImage; // a temporary image to which the acquired image will be stored before being copied to AcquiredInput
//	//bool print_time = false; // variable used for settings tab
//	//DigitalMicrograph::TagGroup Persistent;
//	//Persistent = DigitalMicrograph::GetPersistentTagGroup();
//	//std::string Tag_path;
//	//Tag_path = "DigitalDiffraction:Settings:";
//
//	Gatan::PlugIn::ImageDataLocker InputLock(AcquiredInput);
//	float* InputPix = (float*)InputLock.get();
//
//	//try
//	//{
//	//	DigitalMicrograph::TagGroupGetTagAsBoolean(Persistent, (Tag_path + "Print Time").c_str(), &print_time);//getting the setting saved in the global tags
//	//}
//	//catch (...) {}
//
//	//if (print_time == true)
//	//{
//	//	DigitalMicrograph::Result("Before acq->Begin\n");
//	//}
//	try
//	{
//		//acqsource->BeginAcquisition();
//		acqprmchanged = false;
//		AcquiredImage = Gatan::Camera::CreateImageForAcquire(acq, "Acquired Image");
////		DigitalMicrograph::Result("Before acquireto\n");
//
//		//clock_t start = clock();
//		if (!acqsource->AcquireTo(AcquiredImage, true, 0.5, acqprmchanged))
//		{
//			// Now wait for it to finish again but dont restart if it finishes durign call....
//			while (!acqsource->AcquireTo(AcquiredImage, false,0.5, acqprmchanged))
//			{
//				// Waiting for read to finish
//			}
//		}
//		//clock_t finish = clock() - start;
////		DigitalMicrograph::Result("Acquisition time inside function = " + boost::lexical_cast<std::string>(finish)+" ticks\n");
//		//if (print_time == true)
//		//{
//		//	DigitalMicrograph::Result("Acquisition time inside function = " + boost::lexical_cast<std::string>(((float)finish) / CLOCKS_PER_SEC) + " seconds\n");
//		//}
//		//		DigitalMicrograph::Result("After acquireto\n");
//		//acqsource->FinishAcquisition();
////		DigitalMicrograph::Result("finished acquisition in acquire function\n");
//
//		//Image acquired, now copy to the input image
//		long acquiredx, acquiredy;
//		DigitalMicrograph::Get2DSize(AcquiredImage, &acquiredx, &acquiredy);
//
//		Gatan::PlugIn::ImageDataLocker AcquiredLock(AcquiredImage);
//		float* AcquiredPix = (float*)AcquiredLock.get();
//
//		std::copy(AcquiredPix, AcquiredPix + (acquiredx*acquiredy), InputPix);
//
//		//AcquiredInput = AcquiredImage;
//
//		DigitalMicrograph::ImageDataChanged(AcquiredInput);
//		//No longer need the temporary image; delete it
//		DigitalMicrograph::DeleteImage(AcquiredImage);
//		return;
//	}
//	catch (...)
//	{
//		DigitalMicrograph::Result("Failed in acquisition\n");
//		return;
//	}
//}







ExtraGatan.cpp
void ExtraGatan::EMBeamCentre(std::string Tag_Path, DigitalMicrograph::Image IMG1)
{
	DigitalMicrograph::Result("In EMBeamCentre\n");
	long ShiftX0, ShiftY0;
	float xShpY, yShpX, yShpY, xShpX;
	EMGetBeamShift(&ShiftX0, &ShiftY0);
	DigitalMicrograph::TagGroup PersistentTags = DigitalMicrograph::GetPersistentTagGroup();
	DigitalMicrograph::Result("About to get tags...\n");
	DigitalMicrograph::TagGroupGetTagAsFloat(PersistentTags,(Tag_Path + "xShpX").c_str(), &xShpX);
	DigitalMicrograph::TagGroupGetTagAsFloat(PersistentTags, (Tag_Path + "xShpY").c_str(), &xShpY);
	DigitalMicrograph::TagGroupGetTagAsFloat(PersistentTags, (Tag_Path + "yShpX").c_str(), &yShpX);
	DigitalMicrograph::TagGroupGetTagAsFloat(PersistentTags, (Tag_Path + "yShpY").c_str(), &yShpY);
	DigitalMicrograph::Result("xShpX ="+boost::lexical_cast<std::string>(xShpX)+"\n");
	DigitalMicrograph::Result("Got tags...\n");
	
	long x0, y0; // coords of untilted beam (in pixels)
	DigitalMicrograph::Result("Getting max pixel intensity...\n");
	float maxval = ExtraGatan::Max(IMG1);
	ExtraGatan::PixelPos(IMG1, maxval, &x0, &y0, false);
	long imgx, imgy;
	DigitalMicrograph::Get2DSize(IMG1, &imgx, &imgy);
	//long x1 = imgx - x0;//x1,y1 are the no. of pixels to move [x,y]
	//long y1 = imgy - y0;
	long x1 = imgx/2 - x0;//x1,y1 are the no. of pixels to move [x,y]
	long y1 = imgy/2 - y0;
	//long xCentre = ExtraGatan::round(ShiftX0 + (long)(x1*xShpX) + (long)(y1*yShpX));
	//long yCentre = ExtraGatan::round(ShiftY0 + (long)(x1*xShpY) + (long)(y1*yShpY));
	long x1dacsh, y1dacsh;
	x1dacsh = (long)(x1*xShpX + y1*yShpX);
	y1dacsh = (long)(x1*xShpY + y1*yShpY);
	//long xCentre = (x1*xShpXint + y1*yShpXint);
	//long yCentre = (x1*xShpYint + y1*yShpYint);
	DigitalMicrograph::Result("About to shift beam...\n");
	//ExtraGatan::ABSShift(xCentre, yCentre);
	DigitalMicrograph::EMBeamShift(x1dacsh, y1dacsh);
	DigitalMicrograph::Result("Finished in EMBeam Centre, beam should be at centre of image\n");
	//remember to call a sleep function in the main after calling this function
}
